// datasource db {
//   provider = "sqlite"
//   url      = "file:database.db"
// }

// generator client {
//   provider             = "prisma-client-py"
//   recursive_type_depth = 5
// }

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   views     Int     @default(0)
//   published Boolean @default(false)
//   author    User?   @relation(fields: [author_id], references: [id])
//   author_id Int?
// }
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  natural
  historical
  cultural
  religious
  urban
  beach
  mountain
  adventure
  resort
  other
}

enum Province {
  AN_GIANG
  BA_RIA_VUNG_TAU
  BAC_GIANG
  BAC_KAN
  BAC_LIEU
  BAC_NINH
  BEN_TRE
  BINH_DINH
  BINH_DUONG
  BINH_PHUOC
  BINH_THUAN
  CA_MAU
  CAO_BANG
  DAK_LAK
  DAK_NONG
  DIEN_BIEN
  DONG_NAI
  DONG_THAP
  GIA_LAI
  HA_GIANG
  HA_NAM
  HA_TINH
  HAI_DUONG
  HAU_GIANG
  HOA_BINH
  HUNG_YEN
  KHANH_HOA
  KIEN_GIANG
  KON_TUM
  LAI_CHAU
  LAM_DONG
  LANG_SON
  LAO_CAI
  LONG_AN
  NAM_DINH
  NGHE_AN
  NINH_BINH
  NINH_THUAN
  PHU_THO
  PHU_YEN
  QUANG_BINH
  QUANG_NAM
  QUANG_NGAI
  QUANG_NINH
  QUANG_TRI
  SOC_TRANG
  SON_LA
  TAY_NINH
  THAI_BINH
  THAI_NGUYEN
  THANH_HOA
  THUA_THIEN_HUE
  TIEN_GIANG
  TRA_VINH
  TUYEN_QUANG
  VINH_LONG
  VINH_PHUC
  YEN_BAI
  HA_NOI
  HAI_PHONG
  DA_NANG
  HO_CHI_MINH
  CAN_THO
}

enum Role {
  USER
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

enum ChatRole {
  USER
  ASSISTANT
  SYSTEM
}

model User {
  id           String             @id @default(cuid())
  name         String
  email        String             @unique
  image        String?
  password     String?
  favorites    Favorite[]
  isOAuth      Boolean            @default(false)
  role         Role               @default(USER)
  blogPosts    Blog[]
  blogComments BlogComment[]
  blogReplies  Reply[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  BlogVote     BlogVote[]
  CommentVote  CommentVote[]
  ReplyVote    ReplyVote[]
  trips        TripParticipants[]
  events       SaveEvent[]
  titleChats   TitleChat[]
}

model Location {
  id          String          @id @default(cuid())
  name        String
  description String
  coverImage  String
  category    Category
  province    Province
  district    String?
  latitude    Float?
  longitude   Float?
  favorites   Favorite[]
  blogs       Blog[]          @relation("BlogLocations")
  trips       Trip[]
  events      EventLocation[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  locationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId])
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments  BlogComment[]
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  locations Location[]    @relation("BlogLocations")
  category  Category
  votes     BlogVote[]
}

model BlogComment {
  id        String   @id @default(cuid())
  blogId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  replies Reply[]
  blog    Blog          @relation(fields: [blogId], references: [id])
  user    User          @relation(fields: [userId], references: [id])
  votes   CommentVote[]
}

model Reply {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment BlogComment @relation(fields: [commentId], references: [id])
  user    User        @relation(fields: [userId], references: [id])
  votes   ReplyVote[]
}

model BlogVote {
  id        String   @id @default(cuid())
  blogId    String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model CommentVote {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment BlogComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ReplyVote {
  id        String   @id @default(cuid())
  replyId   String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reply Reply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
}

model Trip {
  id           String             @id @default(cuid())
  name         String?
  description  String?
  startDate    DateTime
  endDate      DateTime
  hotelName    String?
  hotelAddress String?
  locationId   String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  location     Location           @relation(fields: [locationId], references: [id], onDelete: Cascade)
  participants TripParticipants[]
}

model TripParticipants {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
}

model Event {
  id          String          @id @default(cuid())
  name        String
  description String
  coverImage  String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        SaveEvent[]
  locations   EventLocation[]
}

model EventLocation {
  id          String  @id @default(cuid())
  eventId     String
  locationId  String
  description String?

  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([eventId, locationId])
}

model SaveEvent {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Chat {
  id          String     @id @default(cuid())
  role        ChatRole
  content     String
  titleChat   TitleChat? @relation(fields: [titleChatId], references: [id])
  titleChatId String?
  createdAt   DateTime   @default(now())
}

model TitleChat {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  chats     Chat[]
}
